{"version":3,"sources":["Components/AddTodo.js","Components/TodoEmptyMessage.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","onSubmit","onFormSubmit","className","type","value","todo","onChange","onInputChange","editItem","TodoEmptyMessage","isEmpty","Todos","todos","onDeleteTodo","onEditTodo","todoList","length","map","key","id","content","onClick","App","addTodo","updatedTodos","state","setState","editTodo","filteredItems","filter","item","selectedItem","find","handleClearAll","handleChange","e","target","handleSubmit","preventDefault","data","Math","random","deleteTodo","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAgBeA,EAdC,SAACC,GACb,OACI,oCACI,0BAAMC,SAAUD,EAAME,cAClB,2BAAOC,UAAU,YAAjB,iBACA,2BAAOC,KAAK,OAAOC,MAAOL,EAAMM,KAAMC,SAAUP,EAAMQ,gBACrDR,EAAMS,SACH,4BAAQN,UAAU,gBAAgBC,KAAK,UAAvC,aACA,4BAAQD,UAAU,UAAUC,KAAK,UAAjC,eCALM,EARU,SAACV,GACtB,OACI,oCACKA,EAAMW,SAAW,yBAAKR,UAAU,WAAf,oCCqBfS,EAvBD,SAACZ,GAAW,IAChBa,EAAoCb,EAApCa,MAAOC,EAA6Bd,EAA7Bc,aAAcC,EAAef,EAAfe,WACrBC,EAAWH,EAAMI,OAAUJ,EAAMK,KAAI,SAAAZ,GACvC,OACI,yBAAKH,UAAU,YAAYgB,IAAKb,EAAKc,IACjC,0BAAMjB,UAAU,gBAAgBG,EAAKe,SACrC,yBAAKlB,UAAU,eACX,4BAAQA,UAAU,WAAWmB,QAAS,kBAAMP,EAAWT,EAAKc,MAA5D,QACA,4BAAQjB,UAAU,aAAamB,QAAS,kBAAMR,EAAaR,EAAKc,MAAhE,eAKX,uBAAGjB,UAAU,YAAb,oCAEL,OACI,oCACKa,EACD,kBAAC,EAAD,CAAkBL,QAASX,EAAMW,YCkF9BY,G,kBAjGb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAYRwB,QAAU,SAAClB,GACT,IAAImB,EAAY,sBAAO,EAAKC,MAAMb,OAAlB,CAAyBP,IACzC,EAAKqB,SAAS,CACZd,MAAOY,KAhBQ,EAoBnBG,SAAW,SAACR,GACV,IAAMS,EAAgB,EAAKH,MAAMb,MAAMiB,QAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOA,KAC5DY,EAAe,EAAKN,MAAMb,MAAMoB,MAAK,SAAAF,GAAI,OAAIA,EAAKX,KAAOA,KAC/D,EAAKO,SAAS,CACZd,MAAOgB,EACPvB,KAAM0B,EAAaX,QACnBZ,UAAU,EACVE,SAAS,KA3BM,EA+BnBuB,eAAiB,WACf,EAAKP,SAAS,CACZd,MAAO,GACPF,SAAS,KAlCM,EAsCnBwB,aAAe,SAACC,GACd,EAAKT,SAAS,CACZrB,KAAM8B,EAAEC,OAAOhC,MACfM,SAAS,KAzCM,EA6CnB2B,aAAe,SAACF,GAEd,GADAA,EAAEG,iBACsB,KAApB,EAAKb,MAAMpB,KAAf,CAMA,IAAIkC,EAAO,CAAEpB,GAAIqB,KAAKC,SAAUrB,QAAS,EAAKK,MAAMpB,MACpD,EAAKkB,QAAQgB,GACb,EAAKb,SAAS,CACZrB,KAAM,GACNG,UAAU,SATV,EAAKkB,SAAS,CACZhB,SAAS,KAjDI,EA6DnBgC,WAAa,SAACvB,GACZ,IAAMK,EAAe,EAAKC,MAAMb,MAAMiB,QAAO,SAAAxB,GAC3C,OAAOA,EAAKc,KAAOA,KAErB,EAAKO,SAAS,CACZd,MAAOY,EACPd,SAAS,KAjEX,EAAKe,MAAQ,CACXb,MAAO,CACL,CAAEO,GAAI,EAAGC,QAAS,YAClB,CAAED,GAAI,EAAGC,QAAS,eAEpBf,KAAM,GACNG,UAAU,EACVE,SAAS,GATM,E,sEAuET,IACFE,EAAU+B,KAAKlB,MAAfb,MACN,OACE,yBAAKV,UAAU,sBACb,wBAAIA,UAAU,oBAAd,UAEA,kBAAC,EAAD,CACEU,MAAOA,EACPE,WAAY6B,KAAKhB,SACjBd,aAAc8B,KAAKD,WACnBhC,QAASiC,KAAKlB,MAAMf,UAGtB,kBAAC,EAAD,CACET,aAAc0C,KAAKN,aACnBhC,KAAMsC,KAAKlB,MAAMpB,KACjBE,cAAeoC,KAAKT,aACpB1B,SAAUmC,KAAKlB,MAAMjB,WAGvB,4BAAQN,UAAU,YAAYmB,QAASsB,KAAKV,gBAA5C,kB,GA5FUW,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.74e3a941.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTodo = (props) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.onFormSubmit}>\r\n                <label className=\"add-item\">Add new Todo:</label>\r\n                <input type=\"text\" value={props.todo} onChange={props.onInputChange} />\r\n                {props.editItem ?\r\n                    <button className=\"edit-item-btn\" type=\"submit\">Edit Item</button> :\r\n                    <button className=\"add-btn\" type=\"submit\">Add Item</button>}\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\n\r\nconst TodoEmptyMessage = (props) => {\r\n    return (\r\n        <>\r\n            {props.isEmpty && <div className=\"message\">Please enter some todo item...</div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoEmptyMessage;","import React from 'react';\r\nimport TodoEmptyMessage from '../Components/TodoEmptyMessage';\r\n\r\nconst Todos = (props) => {\r\n    let { todos, onDeleteTodo, onEditTodo } = props;\r\n    const todoList = todos.length ? (todos.map(todo => {\r\n        return (\r\n            <div className=\"todo-item\" key={todo.id}>\r\n                <span className=\"todo-content\">{todo.content}</span>\r\n                <div className=\"btn-wrapper\">\r\n                    <button className=\"edit-btn\" onClick={() => onEditTodo(todo.id)}>Edit</button>\r\n                    <button className=\"delete-btn\" onClick={() => onDeleteTodo(todo.id)}>Delete</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    })) :\r\n        (<p className=\"no-todos\">You have no Todo's left, yay...!</p>);\r\n\r\n    return (\r\n        <>\r\n            {todoList}\r\n            <TodoEmptyMessage isEmpty={props.isEmpty} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\nimport AddTodo from './Components/AddTodo';\nimport Todos from './Components/Todos';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        { id: 1, content: 'buy milk' },\n        { id: 2, content: 'play games' }\n      ],\n      todo: '',\n      editItem: false,\n      isEmpty: false\n    }\n  }\n\n  addTodo = (todo) => {\n    let updatedTodos = [...this.state.todos, todo];\n    this.setState({\n      todos: updatedTodos\n    });\n  }\n\n  editTodo = (id) => {\n    const filteredItems = this.state.todos.filter(item => item.id !== id);\n    const selectedItem = this.state.todos.find(item => item.id === id);\n    this.setState({\n      todos: filteredItems,\n      todo: selectedItem.content,\n      editItem: true,\n      isEmpty: false\n    });\n  }\n\n  handleClearAll = () => {\n    this.setState({\n      todos: [],\n      isEmpty: false\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      todo: e.target.value,\n      isEmpty: false\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.todo === '') {\n      this.setState({\n        isEmpty: true\n      });\n      return;\n    }\n    let data = { id: Math.random(), content: this.state.todo }\n    this.addTodo(data);\n    this.setState({\n      todo: '',\n      editItem: false\n    })\n  }\n\n  deleteTodo = (id) => {\n    const updatedTodos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos: updatedTodos,\n      isEmpty: false\n    });\n  }\n\n  render() {\n    let { todos } = this.state;\n    return (\n      <div className=\"todo-app container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n\n        <Todos\n          todos={todos}\n          onEditTodo={this.editTodo}\n          onDeleteTodo={this.deleteTodo}\n          isEmpty={this.state.isEmpty}\n        />\n\n        <AddTodo\n          onFormSubmit={this.handleSubmit}\n          todo={this.state.todo}\n          onInputChange={this.handleChange}\n          editItem={this.state.editItem}\n        />\n\n        <button className=\"clear-all\" onClick={this.handleClearAll}>Clear All</button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}